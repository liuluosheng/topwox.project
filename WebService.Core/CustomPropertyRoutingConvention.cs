// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.AspNet.OData.Extensions;
using Microsoft.AspNet.OData.Routing;
using Microsoft.AspNet.OData.Routing.Conventions;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Routing;
using Microsoft.Data.Edm;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OData.Edm;
using Microsoft.OData.UriParser;
using Data.Attributes;
using Data.Entitys;

namespace WebService.Core
{
    public class CustomPropertyRoutingConvention : NavigationSourceRoutingConvention
    {

        public override string SelectAction(RouteContext routeContext, SelectControllerResult controllerResult, IEnumerable<ControllerActionDescriptor> actionDescriptors)
        {
            var odataPath = routeContext.HttpContext.ODataFeature().Path;

            IActionDescriptorCollectionProvider actionCollectionProvider =
                routeContext.HttpContext.RequestServices.GetRequiredService<IActionDescriptorCollectionProvider>();
            if (odataPath.PathTemplate == "~/entityset/key/navigation")
            {
                if (routeContext.HttpContext.Request.Method.ToUpperInvariant() == "GET")
                {
                    NavigationPropertySegment navigationPathSegment = (NavigationPropertySegment)odataPath.Segments.Last();

                    routeContext.RouteData.Values["navigation"] = navigationPathSegment.NavigationProperty.Name;

                    KeySegment keyValueSegment = (KeySegment)odataPath.Segments[1];
                    routeContext.RouteData.Values[ODataRouteConstants.Key] = keyValueSegment.Keys.First().Value;

                    return "GetNavigation";
                }
            }
            return null;
        }
    }
    public class MatchRoutingConvention : IODataRoutingConvention
    {

        public IEnumerable<ControllerActionDescriptor> SelectAction(RouteContext routeContext)
        {

            var odataPath = routeContext.HttpContext.ODataFeature().Path;
            if (odataPath.Segments.FirstOrDefault() is EntitySetSegment)
            {
                string dy = ((EntitySetSegment)odataPath.Segments.FirstOrDefault()).EdmType.AsElementType().ToString();
                Type type = null;
                foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
                {
                    if (assembly.GetType(dy) is Type t)
                    {
                        type = t;
                        break;
                    }
                }
                if (type == null) return null;

                // Get a IActionDescriptorCollectionProvider from the global service provider.       
                IActionDescriptorCollectionProvider actionCollectionProvider = routeContext.HttpContext.RequestServices.GetRequiredService<IActionDescriptorCollectionProvider>();
                bool IsAutoGeneratedController = type.GetCustomAttribute<AutoGeneratedOdataControllerAttribute>() != null;
                IEnumerable<ControllerActionDescriptor> actionDescriptors = actionCollectionProvider
                        .ActionDescriptors.Items.OfType<ControllerActionDescriptor>()
                        .Where(c => IsAutoGeneratedController
                        ? c.ControllerTypeInfo.IsGenericType && c.ControllerTypeInfo.GenericTypeArguments.First() == type
                        : c.ControllerName == type.Name);
                if(odataPath.PathTemplate== "~/entityset/key/unresolved")
                {
                    var unresolved = ((UnresolvedPathSegment)odataPath.Segments.Last()).SegmentValue.ToUpper();
                    KeySegment keyValueSegment = (KeySegment)odataPath.Segments[1];
                    routeContext.RouteData.Values[ODataRouteConstants.Key] = keyValueSegment.Keys.First().Value;
                    return actionDescriptors.Where(c => c.ActionName.ToUpper() == routeContext.HttpContext.Request.Method.ToUpperInvariant() + unresolved);
                }
                if (odataPath.PathTemplate == "~/entityset/key/navigation")
                {
                    if (routeContext.HttpContext.Request.Method.ToUpperInvariant() == "GET")
                    {
                        NavigationPropertySegment navigationPathSegment = (NavigationPropertySegment)odataPath.Segments.Last();
                        routeContext.RouteData.Values["navigation"] = navigationPathSegment.NavigationProperty.Name;
                        KeySegment keyValueSegment = (KeySegment)odataPath.Segments[1];
                        routeContext.RouteData.Values[ODataRouteConstants.Key] = keyValueSegment.Keys.First().Value;

                        return actionDescriptors.Where(c => c.ActionName == "GetNavigation");
                    }
                }
                SelectControllerResult controllerResult = new SelectControllerResult(type.Name, null);
                IList<IODataRoutingConvention> routingConventions = ODataRoutingConventions.CreateDefault();
                foreach (NavigationSourceRoutingConvention nsRouting in routingConventions.OfType<NavigationSourceRoutingConvention>())
                {
                    string actionName = nsRouting.SelectAction(routeContext, controllerResult, actionDescriptors);
                    if (!String.IsNullOrEmpty(actionName))
                    {
                        return actionDescriptors.Where(
                            c => String.Equals(c.ActionName, actionName, StringComparison.OrdinalIgnoreCase));
                    }
                }
            }
            return null;
        }
    }
}
